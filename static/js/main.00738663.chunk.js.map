{"version":3,"sources":["myAccount.js","schedule.js","Dashboard.js","authProvider.js","transaction.js","checkTransaction.js","listPrice.js","feature.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["myAccountList","props","react_default","a","createElement","List","Object","assign","filters","Responsive","small","SimpleList","primaryText","record","title","secondaryText","concat","views","tertiaryText","Date","published_at","toLocaleDateString","medium","Datagrid","TextField","source","ReferenceField","label","reference","EditButton","myAccountEdit","Edit","SimpleForm","DisabledInput","ReferenceInput","SelectInput","optionText","TextInput","LongTextInput","myAccountCreate","Create","scheduleList","EmailField","Dashboard","Card_default","Title","CardHeader_default","CardContent_default","authProvider","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","transactionList","checkTransactionList","listPriceList","featureList","NotFound","theme","createMuiTheme","palette","App","Admin","catchAll","dashboard","dataProvider","jsonServerProvider","Resource","name","list","edit","create","icon","face","event","payment","redeem","add_shopping_cart","menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00738663.chunk.js","sourcesContent":["// in src/posts.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Edit,\r\n  Create,\r\n  Datagrid,\r\n  ReferenceField,\r\n  TextField,\r\n  EditButton,\r\n  DisabledInput,\r\n  LongTextInput,\r\n  ReferenceInput,\r\n  SelectInput,\r\n  SimpleForm,\r\n  TextInput,\r\n  Filter,\r\n  SimpleList,\r\n  Responsive\r\n} from \"react-admin\";\r\nconst myAccountFilter = props => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    <ReferenceInput label=\"Nama\" source=\"Nama\" reference=\"Nama\" allowEmpty>\r\n      <SelectInput optionText=\"name\" />\r\n    </ReferenceInput>\r\n  </Filter>\r\n);\r\n\r\nexport const myAccountList = props => (\r\n  <List {...props} filters={<myAccountFilter />}>\r\n    <Responsive\r\n      small={\r\n        <SimpleList\r\n          primaryText={record => record.title}\r\n          secondaryText={record => `${record.views} views`}\r\n          tertiaryText={record =>\r\n            new Date(record.published_at).toLocaleDateString()\r\n          }\r\n        />\r\n      }\r\n      medium={\r\n        <Datagrid>\r\n          <TextField source=\"Nama\" />\r\n          <ReferenceField\r\n            label=\"Nomer Hp\"\r\n            source=\"Nomer Hp\"\r\n            reference=\"Nomer Hp\"\r\n          >\r\n            <TextField source=\"name\" />\r\n          </ReferenceField>\r\n          <TextField source=\"Alamat\" />\r\n          <TextField source=\"Nomer Rekening\" />\r\n          <EditButton />\r\n        </Datagrid>\r\n      }\r\n    />\r\n  </List>\r\n);\r\n\r\nconst myAccountTitle = ({ record }) => {\r\n  return <span>myAccount {record ? `\"${record.title}\"` : \"\"}</span>;\r\n};\r\n\r\nexport const myAccountEdit = props => (\r\n  <Edit title={<myAccountTitle />} {...props}>\r\n    <SimpleForm>\r\n      <DisabledInput source=\"Nama\" />\r\n      <ReferenceInput label=\"Nama\" source=\"Nama\" reference=\"Nama\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const myAccountCreate = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <ReferenceInput label=\"Nama\" source=\"nama\" reference=\"nama\">\r\n        <ReferenceInput label=\"NoHp\" source=\"NoHp\" reference=\"NoHp\">\r\n          <SelectInput optionText=\"name\" />\r\n          <SelectInput optionText=\"nohp\" />\r\n        </ReferenceInput>\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","// in src/schedule.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField } from \"react-admin\";\r\n\r\nexport const scheduleList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"body\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/Dashboard.js\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport { Title } from \"react-admin\";\r\n\r\nexport default () => (\r\n  <Card>\r\n    <Title title=\"Welcome To Tampah Nasabah\" />\r\n    <CardHeader title=\"Please Check Your Id\" />\r\n    <CardContent>Or Input Your New Id</CardContent>\r\n  </Card>\r\n);\r\n","// in src/authProvider.js\r\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from \"react-admin\";\r\n\r\nexport default (type, params) => {\r\n  // called when the user attempts to log in\r\n  if (type === AUTH_LOGIN) {\r\n    const { username } = params;\r\n    localStorage.setItem(\"username\", username);\r\n    // accept all username/password combinations\r\n    return Promise.resolve();\r\n  }\r\n  // called when the user clicks on the logout button\r\n  if (type === AUTH_LOGOUT) {\r\n    localStorage.removeItem(\"username\");\r\n    return Promise.resolve();\r\n  }\r\n  // called when the API returns an error\r\n  if (type === AUTH_ERROR) {\r\n    const { status } = params;\r\n    if (status === 401 || status === 403) {\r\n      localStorage.removeItem(\"username\");\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n  // called when the user navigates to a new location\r\n  if (type === AUTH_CHECK) {\r\n    return localStorage.getItem(\"username\")\r\n      ? Promise.resolve()\r\n      : Promise.reject();\r\n  }\r\n  return Promise.reject(\"Unknown method\");\r\n};\r\n","// in src/transaction.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField } from \"react-admin\";\r\n\r\nexport const transactionList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"body\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/checkTransaction.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField } from \"react-admin\";\r\n\r\nexport const checkTransactionList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"body\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/listPrice.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField } from \"react-admin\";\r\n\r\nexport const listPriceList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"body\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/feature.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField } from \"react-admin\";\r\n\r\nexport const featureList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"body\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/NotFound.js\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Title } from \"react-admin\";\r\n\r\nexport default () => (\r\n  <Card>\r\n    <Title title=\"Not Found\" />\r\n    <CardContent>\r\n      <h1>404: Page not found</h1>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n","// in src/App.js\nimport React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport { myAccountList, myAccountEdit, myAccountCreate } from \"./myAccount\";\nimport { scheduleList } from \"./schedule\";\nimport face from \"@material-ui/icons/Face\";\nimport event from \"@material-ui/icons/Event\";\nimport Dashboard from \"./Dashboard\";\nimport authProvider from \"./authProvider\";\n//import dataProvider from \"./dataProvider\";\nimport { transactionList } from \"./transaction\";\nimport payment from \"@material-ui/icons/Payment\";\nimport redeem from \"@material-ui/icons/Redeem\";\nimport { checkTransactionList } from \"./checkTransaction\";\nimport { listPriceList } from \"./listPrice\";\nimport add_shopping_cart from \"@material-ui/icons/AddShoppingCart\";\nimport menu from \"@material-ui/icons/Menu\";\nimport { featureList } from \"./feature\";\nimport NotFound from \"./NotFound\";\n//import Menu from \"./Menu\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\" // Switching the dark mode on is a single property value change.\n  }\n});\nconst App = () => (\n  <Admin\n    //menu={Menu}\n    theme={theme}\n    catchAll={NotFound}\n    title=\"My Custom Admin\"\n    dashboard={Dashboard}\n    authProvider={authProvider}\n    dataProvider={jsonServerProvider(\"http://jsonplaceholder.typicode.com\")}\n  >\n    <Resource\n      name=\"My Account\"\n      list={myAccountList}\n      edit={myAccountEdit}\n      create={myAccountCreate}\n      icon={face}\n    />\n    <Resource name=\"Schedule\" list={scheduleList} icon={event} />\n    <Resource name=\"Transaction\" list={transactionList} icon={payment} />\n    <Resource\n      name=\"Check Transaction\"\n      list={checkTransactionList}\n      icon={redeem}\n    />\n    <Resource name=\"List Price\" list={listPriceList} icon={add_shopping_cart} />\n    <Resource name=\"Feature\" list={featureList} icon={menu} />\n  </Admin>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}